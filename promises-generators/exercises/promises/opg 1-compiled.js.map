{"version":3,"sources":["opg 1.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,iBAAiB,SAAjB,cAAiB,CAAS,IAAT,EAAc,KAAd,EAAoB;AACrC,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAS,MAAT,EAAkB;AACjC,mBAAW,YAAI;AACX,gBAAI,SAAS,IAAb;AACA,gBAAG,MAAH,EAAU;AACN,uBAAO,WAAP,CAAmB,IAAnB,EAAyB,UAAS,GAAT,EAAc,MAAd,EAAsB;AAC3C,4BAAQ;AACJ,kCAAW,IADP;AAEJ,kCAAS,OAAO,QAAP,CAAgB,KAAhB;AAFL,qBAAR;AAMH,iBAPD;AAQH,aATD,MASK;AACD,uBAAO,gCAAP;AACH;AACJ,SAdD,EAcE,KAdF;AAeH,KAhBM,CAAP;AAiBH,CAlBD;AAmBA,OAAO,OAAP,CAAe,GAAf,GAAqB,UAAS,QAAT,EAAmB;AACpC,QAAI,KAAK,eAAe,EAAf,EAAmB,CAAnB,CAAT;AACA,QAAI,KAAK,eAAe,EAAf,EAAmB,CAAnB,CAAT;AACA,QAAI,KAAK,eAAe,EAAf,EAAmB,CAAnB,CAAT;AACA,QAAI,KAAK,eAAe,EAAf,EAAmB,CAAnB,CAAT;AACA,QAAI,KAAK,eAAe,EAAf,EAAmB,CAAnB,CAAT;AACA,QAAI,KAAK,eAAe,CAAf,EAAkB,CAAlB,CAAT;;AAEA,QAAI,UAAU,EAAd;;AAEA,YAAQ,GAAR,CAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAZ,EAAsC,IAAtC,CAA2C,eAAO;AAC9C,kBAAU,GAAV;AACA,YAAI,IAAI;AACJ,qBAAU,KAAK,IAAI,MAAT,GAAkB,iBADxB;AAEJ,sBAAW;AAFP,SAAR;AAIA,iBAAS,IAAT,EAAc,CAAd;AACH,KAPD,EAOG,KAPH,CAOS,eAAO;AACZ,iBAAS,GAAT,EAAa,IAAb;AACH,KATD;AAUH,CApBD","file":"opg 1-compiled.js","sourcesContent":["'use strict'\r\nvar crypto = require('crypto');\r\nlet promiseFactory = function(Size,delay){\r\n    return new Promise((resolve,reject)=>{\r\n        setTimeout(()=>{\r\n            let status = true;\r\n            if(status){\r\n                crypto.randomBytes(Size, function(err, buffer) {\r\n                    resolve({\r\n                        \"length\" : Size,\r\n                        \"random\":buffer.toString(\"hex\")\r\n                    });\r\n\r\n\r\n                });\r\n            }else{\r\n                reject(\"Upppps, lind is a mutterfukker\")\r\n            }\r\n        },delay);\r\n    });\r\n}\r\nmodule.exports.hex = function(callback) {\r\n    let p1 = promiseFactory(48, 0);\r\n    let p2 = promiseFactory(40, 0);\r\n    let p3 = promiseFactory(32, 0);\r\n    let p4 = promiseFactory(24, 0);\r\n    let p5 = promiseFactory(16, 0);\r\n    let p6 = promiseFactory(8, 0);\r\n\r\n    let results = [];\r\n\r\n    Promise.all([p1, p2, p3, p4, p5, p6]).then(arr => {\r\n        results = arr;\r\n        let j = {\r\n            \"title\" : \"\" + arr.length + \" Secure Randoms\",\r\n            \"random\" : arr\r\n        }\r\n        callback(null,j);\r\n    }).catch(err => {\r\n        callback(err,null)\r\n    })\r\n}\r\n"]}